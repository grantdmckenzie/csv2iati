<?php

  /*
	@author: Grant McKenzie (gmckenzie@spatialdev.com)
	@client: World Bank
	@project: csv2iati
	@date: August 2013
	@description: Export Script. 
	This file requires: 
	    - Stringified JSON mapping object (between CSV column headers and IATI elements
	    - Serialized PHP Organization object (includes Org name, reference, etc)
	    - Path to CSV file uploaded to the server (on the previous index.php page)
  */
  
  error_reporting(E_ALL);
  ini_set('display_errors', 1);
  
  if (isset($_POST['map'])) {
    // JSON object for the csv2iati mapping is passed as a string
    require_once('inc/class.inc');
    date_default_timezone_set('UTC');
    $d = date("Y-m-d\TH:i:s");
    // Deserialize the organization information that was posted here.
    $org = unserialize($_POST['serializeorg']);
 
    // turn the JSON Mapping Object into a PHP Array
    $map = json_decode(urldecode($_POST['map']));

    // Get the CSV filename, open it and parse it in to a CSV object.
    $csv = parseCSV($_POST['filename']);
    
    // Construct the base XML element and add required attributes
    $xml = new SimpleXMLElement('<iati-activities/>');
    $xml->addAttribute('generated-datetime', $d);
    $xml->addAttribute('version', '1.0');
    
    foreach($csv->data as $key=>$row) {
    
	// Activity is a required subchild of the Activities element.  There is one activity for each row in the CSV file
	$activity = $xml->addChild('iati-activity');
	$activity->addAttribute('default-currency',$org['orgcurrency']);
	$activity->addAttribute('xml:lang',$org['orglanguage']);
	
	// All activities require a reporting agency as well.
	$reportingorg = $activity->addChild('reporting-org',$org['orgname']);
	$reportingorg->addAttribute('ref',$org['orgref']);
	$reportingorg->addAttribute('type',$org['orgtype']);
	
	// Add the additional elements based on the CSV and provided mapping file.
	mapFields($key, $row);
    }

    Header('Content-type: text/xml; charset=ISO-8859-2');
    print($xml->asXML());

   } else {
      echo "No IATI object provided.";
   } 
   
   // Function to parse the CSV file and store as CSV object
   function parseCSV($file) {
    require_once('inc/parsecsv.inc');
    $csv = new parseCSV();
    $csv->auto($file);
    return $csv;
  }
  
  function mapFields($csvkey, $row) {
    global $map, $activity;
    foreach($map as $key=>$val) {
      $subkey = explode(".",$key);
      
      // Special Case for complex (nested) xml fields.  Currently these include Budget, Transation and Location.  Could potentially add Result in the future. 
      if ($subkey[0] == "budget" || $subkey[0] == "transaction" || $subkey[0] == "location" ) {
      
	  // Add the base name of the element (no possability for text value here)
	  $prop = $activity->addChild($subkey[0]);
	  foreach($val as $propkey=>$propval) {
	    // Add properties to the base element.
	    if ($propkey == "type" && $propval != "None") {
	      $prop = checkManualEntryAtt($row,$propval,$prop, $propkey);
	    } else {
	      if (is_object($propval)) {
		// Create subelement and add text value
		if (property_exists($propval,"text")) {
		  if ($propval->text != "None") {
		    $subelement = checkManualEntry($prop, $row, $propval->text, $propkey);
		  }
		// Create subelement with no text value
		} else {
		  $subelement = $prop->addChild($propkey);
		}
		// Add properties to the subelement.
		foreach($propval as $subpropkey=>$subpropval) {
		  if ($subpropkey != "text" && $subpropval != "None") {
		    $subelement = checkManualEntryAtt($row,$subpropval,$subelement, $subpropkey);
		  }
		}
		
	      } 
	    }
	  }
      // Not complex (nested) XML Structures
      } else {
	// Check to see if there is a "text" property
	if (property_exists($val,"text")) {
	
	  // If there is one and it has been assigned a value create the element with a value
	  if($val->text != "None")
	    $prop = checkManualEntry($activity, $row, $val->text, $subkey[0]);
	} else {
	
	  // If there is no text value, just create an element with no assigned value
	  $prop = $activity->addChild($subkey[0]);
	}
	if($val->text != "None") {
	  
	  // Add attributes to the xml element
	  foreach($val as $propkey=>$propval) {
	      if ($propkey != "text" && $propval != "None") {
		if (!is_object($propval)) {
		  $prop = checkManualEntryAtt($row, $propval, $prop, $propkey);
		}
	      }
	  }
	}
      }
    }
  }
 
  // Check that the array properties exist before adding a new element.
  function checkManualEntry($parent,$row,$val,$key) {
    if(strlen($val) > 0) {
      if(array_key_exists($val, $row))
	$prop = $parent->addChild($key, utf8_decode(htmlspecialchars($row[$val])));
      else
	$prop = $parent->addChild($key, utf8_decode(htmlspecialchars($val)));
    return $prop;
    }
  }
  
  // Check that the array properties exist before adding a new property to an element.
  function checkManualEntryAtt($row,$propval,$prop, $propkey) {
    if(strlen($propval) > 0) {
      if(array_key_exists($propval, $row))
	$prop->addAttribute($propkey, utf8_decode(htmlspecialchars($row[$propval])));
      else
	$prop->addAttribute($propkey, utf8_decode(htmlspecialchars($propval)));
      return $prop;
    }
  }
?>